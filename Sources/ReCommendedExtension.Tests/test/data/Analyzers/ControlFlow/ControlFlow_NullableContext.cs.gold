using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace Test
{
    internal static class Class
    {
        class Foo
        {
            public void Method() { }
        }

        static async Task Promises(TaskCompletionSource<DayOfWeek?> promise)
        {
            var dayOfWeek = await promise.Task;

            Debug.Assert(dayOfWeek != null); // not redundant (dayOfWeek is nullable)
        }

        static string NotNullMethod() => "one";

        static string field = NotNullMethod().|AssertNotNull|(0)(); // redundant

        static string Property => NotNullMethod().|AssertNotNull|(1)(); // redundant

        static Lazy<string?> PropertyLazy => new Lazy<string?>(() => NotNullMethod().AssertNotNull()); // redundant

        static string? PropertyNullable => null;

        static string Property2 { get; } = NotNullMethod().|AssertNotNull|(2)(); // redundant

        static string Property3 { get; set; } = NotNullMethod().|AssertNotNull|(3)(); // redundant

        static string Method() => NotNullMethod().|AssertNotNull|(4)(); // redundant

        [DebuggerStepThrough]
        [JetBrains.Annotations.NotNull]
        static T AssertNotNull<T>(this T? value) where T : class
        {
            AssertThatTrue(value != null);

            return value;
        }

        class Nested
        {
            string? field = NotNullMethod().|AssertNotNull|(5)(); // redundant

            string? Property => NotNullMethod().|AssertNotNull|(6)(); // redundant

            string? AutoProperty { get; } = NotNullMethod().|AssertNotNull|(7)(); // redundant
        }

        static void ClassConstraint<T>(T one, T? two) where T : class
        {
            var x = one.|AssertNotNull|(8)(); // redundant

            var y = two.AssertNotNull().|AssertNotNull|(9)(); // redundant (2nd)
        }

        static void ClassNullableClassConstraint<T>(T one) where T : class?
        {
            var x = one.|AssertNotNull|(10)().|AssertNotNull|(11)(); // redundant (2nd)
        }

        static readonly string[] Words = { "one", "two", "three" };

        static readonly Dictionary<int, string> WordMap = new Dictionary<int, string>{ { 1, "one" }, { 2, "two" } };

        static readonly Dictionary<int, string[]> WordMap2 =
            new Dictionary<int, string[]> { { 1, new[] { "one", "two", "three" } }, { 2, new[] { "one", "two", "three" } } };

        static void Iterations()
        {
            var query0 = from word in Words where word.AssertNotNull().Length > 2 select word; // "AssertNotNull" must be redundant
            var query1 = from word in Words where word != null select word; // "word != null" is always true
            var query2 = from word in Words select word.AssertNotNull(); // "AssertNotNull" must be redundant

            |AssertThatNotNull(Words)|(12); // redundant
            foreach (var word in Words)
            {
                |AssertThatNotNull(word)|(13); // redundant
            }

            |AssertThatNotNull(WordMap)|(14); // redundant
            foreach (var (key, value) in WordMap)
            {
                |AssertThatNotNull(value)|(15); // redundant
            }
            foreach (var value in WordMap.Values)
            {
                |AssertThatNotNull(value)|(16); // redundant
            }

            |AssertThatNotNull(WordMap2)|(17); // redundant
            foreach (var (key, values) in WordMap2)
            {
                |AssertThatNotNull(values)|(18); // redundant
                foreach (var value in values)
                {
                    |AssertThatNotNull(value)|(19); // redundant
                }
            }
            foreach (var values in WordMap2.Values)
            {
                |AssertThatNotNull(values)|(20); // redundant
                foreach (var value in values)
                {
                    |AssertThatNotNull(value)|(21); // redundant
                }
            }
        }

        static void Foo(bool b, object? s, string? x)
        {
            Action action = () =>
            {
                var text = "";
                |AssertThatTrue(text != null)|(22); // redundant
                var text2 = text.AssertNotNull().Replace("a", "b"); // redundant
                |AssertThatTrue(text2 != null)|(23); // redundant
            };

            var length = Property.     |AssertNotNull|(24)()         .     |AssertNotNull|(25)()      .Length; // redundant (both)
            var qqq = Property.|AssertNotNull|(26)().ToList().All(char.IsDigit); // redundant

            if (b)
            {
                if (b) { }

                AssertThatTrue(b); // redundant

                Console.WriteLine(b.ToString());
            }
            else
            {
                AssertThatFalse(b); // redundant
            }

            if (s is string)
            {
                if (s as string != null) { }
                AssertThatTrue(s as string != null);
                AssertThatFalse(s as string == null);
                AssertThatNotNull(s as string);
            }
            else
            {
                AssertThatNull(s as string);
            }

            if (PropertyNullable != null)
            {
                |AssertThatTrue(PropertyNullable != null)|(27); // redundant
            }
            AssertThatFalse(PropertyNullable == null); // redundant
            AssertThatNotNull(PropertyNullable);

            |AssertThatTrue(true)|(28);
            |AssertThatFalse(false)|(29);
            ||AssertThatNull<string>(null)|(30)|(31);

            |AssertThatNotNull(new object())|(32);
            new object().|AssertNotNull|(33)();

            if (x != null)
            {
                |AssertThatTrue(condition: x != null)|(34); // redundant
                AssertThatTrue(x != null);
                AssertThatTrue(null != x);

                AssertThatFalse(null == x);
                AssertThatFalse(x == null);

                Console.WriteLine(x.ToString());
            }
            else
            {
                AssertThatTrue(condition: x == null);
                AssertThatTrue(x == null);
                AssertThatTrue(null == x);

                AssertThatFalse(null != x);
                AssertThatFalse(x != null);

                AssertThatNull(x);
            }
        }

        static void Foo(string x)
        {
            |AssertThatNotNull(x)|(35); // redundant
            x.|AssertNotNull|(36)(); // redundant
        }

        class A
        {
            public string NotNull { get; set; }

            public string? CanBeNull { get; set; }
        }

        static void NullPropagation1(A? canBeNull) => AssertThatTrue(canBeNull?.NotNull != null);

        static void NullPropagation2(A? canBeNull) => AssertThatNotNull(canBeNull?.NotNull);

        static void NullPropagation3(A? canBeNull) => Console.WriteLine(canBeNull?.NotNull.|AssertNotNull|(37)()); // redundant

        static void NullPropagation4(A notNull) => AssertThatTrue(notNull?.NotNull != null); // redundant

        static void NullPropagation5(A notNull) => AssertThatNotNull(notNull?.NotNull); // redundant

        static void NullPropagation6(A notNull) => Console.WriteLine(notNull?.NotNull.|AssertNotNull|(38)()); // redundant

        static void NullPropagation7(A notNull) => AssertThatTrue(notNull?.CanBeNull != null);

        static void NullPropagation8(A notNull) => AssertThatNotNull(notNull?.CanBeNull);

        static void NullPropagation9(A notNull) => Console.WriteLine(notNull?.CanBeNull.AssertNotNull());

        [AssertionMethod]
        [ContractAnnotation("false => void")]
        static void AssertThatTrue([AssertionCondition(AssertionConditionType.IS_TRUE)] bool condition) => Debug.Assert(condition);

        [AssertionMethod]
        [ContractAnnotation("true => void")]
        static void AssertThatFalse([AssertionCondition(AssertionConditionType.IS_FALSE)] bool condition) => Debug.Assert(!condition);

        [AssertionMethod]
        [ContractAnnotation("notnull => void")]
        static void AssertThatNull<T>([AssertionCondition(AssertionConditionType.IS_NULL)] T? reference) where T : class
            => Debug.Assert(reference == null);

        [AssertionMethod]
        [ContractAnnotation("null => void")]
        static void AssertThatNotNull<T>([AssertionCondition(AssertionConditionType.IS_NOT_NULL)] T? reference) where T : class
            => Debug.Assert(reference != null);

        [return: NotNullIfNotNull("value")]
        static T? PassThrough<T>(T? value) where T : class => value;

        static void CheckPassedThrough(string value)
        {
            var result = PassThrough(value);

            |Debug.Assert(result != null)|(39); // redundant
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(1): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(2): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(3): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(4): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(5): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(6): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(7): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(8): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(9): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(10): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(11): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(12): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(13): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(14): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(15): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(16): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(17): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(18): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(19): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(20): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(21): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(22): ReSharper Suggestion: Assertion is redundant because the expression is true here.
(23): ReSharper Suggestion: Assertion is redundant because the expression is true here.
(24): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(25): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(26): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(27): ReSharper Suggestion: Assertion is redundant because the expression is true here.
(28): ReSharper Suggestion: Assertion is redundant because the expression is true here.
(29): ReSharper Suggestion: Assertion is redundant because the expression is false here.
(30): ReSharper Suggestion: Assertion is redundant because the expression is null here.
(31): ReSharper Suggestion: Assertion is redundant because the expression is null here.
(32): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(33): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(34): ReSharper Suggestion: Assertion is redundant because the expression is true here.
(35): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(36): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(37): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(38): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(39): ReSharper Suggestion: Assertion is redundant because the expression is true here.
