using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace Test
{
    internal static class Class
    {
        static void HashSetContains<T>(HashSet<T> items, [AllowNull] T value)
        {
            if (!items.Comparer.Equals(value, default))
            {
                var contained = items.Contains(value!); // not redundant (otherwise: compiler warning)
            }
        }

        class Foo
        {
            public void Method() { }
        }

        static void Reflection()
        {
            var method = typeof(Foo).GetMethod(nameof(Foo.Method), BindingFlags.Public | BindingFlags.Instance)!; // not redundant (nullable result)
            method.Invoke(new Foo(), null);
        }

        static void Reflection_Closure()
        {
            Action action = () =>
            {
                var method = typeof(Foo).GetMethod(
                    nameof(Foo.Method),
                    BindingFlags.Public | BindingFlags.Instance)!; // not redundant (nullable result)
                method.Invoke(new Foo(), null);
            };
            action();
        }

        static void CastingNullableReturnValue()
        {
            var foo = (Foo)Activator.CreateInstance(typeof(Foo))!; // not redundant (otherwise: compiler warning)
        }

        static void UnboxingNullableValueFromDictionary(Dictionary<int, DayOfWeek?> dict)
        {
            var dayOfWeek = (DayOfWeek)dict[3]!; // not redundant (otherwise: compiler warning)
        }

        static void UnboxingNullableValue(int? x)
        {
            var a = new char[(int)x!]; // not redundant (otherwise: compiler warning)
            Console.WriteLine(a.Length);
        }

        static void UnboxingNullableValue_Closure(int? x)
        {
            Action action = () =>
            {
                var b = new char[(int)x!]; // not redundant (otherwise: compiler warning)
                Console.WriteLine(b.Length);
            };
            action();
        }

        static void Defaults<T>(List<T> list, List<string> texts)
        {
            var contains = list.Contains(default!); // not redundant (otherwise: compiler warning)
            var contains2 = texts.Contains((null as string)!); // not redundant (otherwise: compiler warning)
        }

        static async Task Promises(TaskCompletionSource<DayOfWeek?> promise)
        {
            var dayOfWeek = await promise.Task;

            Debug.Assert(dayOfWeek != null); // not redundant (dayOfWeek is nullable)
        }

        static string NotNullMethod() => "one";

        static string field = NotNullMethod().|AssertNotNull|(0)();
        static string field_NFO = NotNullMethod()|!|(1);

        static string Property => NotNullMethod().|AssertNotNull|(2)();
        static string Property_NFO => NotNullMethod()|!|(3);

        static Lazy<string?> PropertyLazy => new Lazy<string?>(() => NotNullMethod().|AssertNotNull|(4)());
        static Lazy<string?> PropertyLazy_NFO => new Lazy<string?>(() => NotNullMethod()|!|(5));

        static string? PropertyNullable => null;

        static string Property2 { get; } = NotNullMethod().|AssertNotNull|(6)();
        static string Property2_NFO { get; } = NotNullMethod()|!|(7);

        static string Property3 { get; set; } = NotNullMethod().|AssertNotNull|(8)();
        static string Property3_NFO { get; set; } = NotNullMethod()|!|(9);

        static string Method() => NotNullMethod().|AssertNotNull|(10)();
        static string Method_NFO() => NotNullMethod()|!|(11);

        [DebuggerStepThrough]
        [JetBrains.Annotations.NotNull]
        static T AssertNotNull<T>(this T? value) where T : class
        {
            AssertThatTrue(value != null);

            return value;
        }

        class Nested
        {
            string? field = NotNullMethod().|AssertNotNull|(12)();
            string? field_NFO = NotNullMethod()|!|(13);

            string? Property => NotNullMethod().|AssertNotNull|(14)();
            string? Property_NFO => NotNullMethod()|!|(15);

            string? AutoProperty { get; } = NotNullMethod().|AssertNotNull|(16)();
            string? AutoProperty_NFO { get; } = NotNullMethod()|!|(17);
        }

        static void ClassConstraint<T>(T one, T? two) where T : class
        {
            var x = one.|AssertNotNull|(18)();
            var x_NFO = one|!|(19);

            var y = two.AssertNotNull().|AssertNotNull|(20)();
            var y_NFO = two.AssertNotNull()|!|(21);
        }

        static void ClassNullableClassConstraint<T>(T one) where T : class?
        {
            var x = one.|AssertNotNull|(22)().|AssertNotNull|(23)();
            var x_NFO = one.|AssertNotNull|(24)()|!|(25);
        }

        static readonly string[] Words = { "one", "two", "three" };

        static readonly Dictionary<int, string> WordMap = new Dictionary<int, string>{ { 1, "one" }, { 2, "two" } };

        static readonly Dictionary<int, string[]> WordMap2 =
            new Dictionary<int, string[]> { { 1, new[] { "one", "two", "three" } }, { 2, new[] { "one", "two", "three" } } };

        static void Iterations()
        {
            var query0 = from word in Words where word.AssertNotNull().Length > 2 select word; // "AssertNotNull" must be redundant
            var query0_NFO = from word in Words where word!.Length > 2 select word; // "!" must be redundant
            var query1 = from word in Words where word != null select word; // "word != null" is always true
            var query2 = from word in Words select word.AssertNotNull(); // "AssertNotNull" must be redundant
            var query2_NFO = from word in Words select word!; // "!" must be redundant

            |AssertThatNotNull(Words)|(26);
            foreach (var word in Words)
            {
                |AssertThatNotNull(word)|(27);
            }

            |AssertThatNotNull(WordMap)|(28);
            foreach (var (key, value) in WordMap)
            {
                |AssertThatNotNull(value)|(29);
            }
            foreach (var value in WordMap.Values)
            {
                |AssertThatNotNull(value)|(30);
            }

            |AssertThatNotNull(WordMap2)|(31);
            foreach (var (key, values) in WordMap2)
            {
                |AssertThatNotNull(values)|(32);
                foreach (var value in values)
                {
                    |AssertThatNotNull(value)|(33);
                }
            }
            foreach (var values in WordMap2.Values)
            {
                |AssertThatNotNull(values)|(34);
                foreach (var value in values)
                {
                    |AssertThatNotNull(value)|(35);
                }
            }
        }

        static void Foo(bool b, object? s, string? x)
        {
            Action action = () =>
            {
                var text = "";
                |AssertThatTrue(text != null)|(36);
                var text2 = text.AssertNotNull().Replace("a", "b");
                var text2_NFO = text!.Replace("a", "b");
                |AssertThatTrue(text2 != null)|(37);
            };

            var length = Property.     |AssertNotNull|(38)()         .     |AssertNotNull|(39)()      .Length;
            var qqq = Property.|AssertNotNull|(40)().ToList().All(char.IsDigit);
            var qqq_NFO = Property|!|(41).ToList().All(char.IsDigit);

            if (b)
            {
                if (b) { }

                AssertThatTrue(b); // must be redundant

                Console.WriteLine(b.ToString());
            }
            else
            {
                AssertThatFalse(b); // must be redundant
            }

            if (s is string)
            {
                if (s as string != null) { }
                AssertThatTrue(s as string != null);
                AssertThatFalse(s as string == null);
                AssertThatNotNull(s as string);
            }
            else
            {
                AssertThatNull(s as string);
            }

            if (PropertyNullable != null)
            {
                |AssertThatTrue(PropertyNullable != null)|(42);
            }
            AssertThatFalse(PropertyNullable == null);
            AssertThatNotNull(PropertyNullable);

            |AssertThatTrue(true)|(43);
            |AssertThatFalse(false)|(44);
            ||AssertThatNull<string>(null)|(45)|(46);

            |AssertThatNotNull(new object())|(47);
            new object().|AssertNotNull|(48)();
            var nfo = new object()|!|(49);

            if (x != null)
            {
                |AssertThatTrue(condition: x != null)|(50);
                AssertThatTrue(x != null);
                AssertThatTrue(null != x);

                AssertThatFalse(null == x);
                AssertThatFalse(x == null);

                Console.WriteLine(x.ToString());
            }
            else
            {
                AssertThatTrue(condition: x == null);
                AssertThatTrue(x == null);
                AssertThatTrue(null == x);

                AssertThatFalse(null != x);
                AssertThatFalse(x != null);

                AssertThatNull(x);
            }
        }

        static void Foo(string x)
        {
            |AssertThatNotNull(x)|(51);
            x.|AssertNotNull|(52)();

            var y = x|!|(53);
        }

        class A
        {
            public string NotNull { get; set; }

            public string? CanBeNull { get; set; }
        }

        static void NullPropagation1(A? canBeNull) => AssertThatTrue(canBeNull?.NotNull != null);

        static void NullPropagation2(A? canBeNull) => AssertThatNotNull(canBeNull?.NotNull);

        static void NullPropagation3(A? canBeNull) => Console.WriteLine(canBeNull?.NotNull.|AssertNotNull|(54)());
        static void NullPropagation3_NFO(A? canBeNull) => Console.WriteLine(canBeNull?.NotNull!);

        static void NullPropagation4(A notNull) => AssertThatTrue(notNull?.NotNull != null); // redundant

        static void NullPropagation5(A notNull) => AssertThatNotNull(notNull?.NotNull); // redundant

        static void NullPropagation6(A notNull) => Console.WriteLine(notNull?.NotNull.|AssertNotNull|(55)()); // redundant
        static void NullPropagation6_NFO(A notNull) => Console.WriteLine(notNull?.NotNull|!|(56).Length); // redundant

        static void NullPropagation7(A notNull) => AssertThatTrue(notNull?.CanBeNull != null);

        static void NullPropagation8(A notNull) => AssertThatNotNull(notNull?.CanBeNull);

        static void NullPropagation9(A notNull) => Console.WriteLine(notNull?.CanBeNull.AssertNotNull());
        static void NullPropagation9_NFO(A notNull) => Console.WriteLine(notNull?.CanBeNull!);

        [AssertionMethod]
        [ContractAnnotation("false => void")]
        static void AssertThatTrue([AssertionCondition(AssertionConditionType.IS_TRUE)] bool condition) => Debug.Assert(condition);

        [AssertionMethod]
        [ContractAnnotation("true => void")]
        static void AssertThatFalse([AssertionCondition(AssertionConditionType.IS_FALSE)] bool condition) => Debug.Assert(!condition);

        [AssertionMethod]
        [ContractAnnotation("notnull => void")]
        static void AssertThatNull<T>([AssertionCondition(AssertionConditionType.IS_NULL)] T? reference) where T : class
            => Debug.Assert(reference == null);

        [AssertionMethod]
        [ContractAnnotation("null => void")]
        static void AssertThatNotNull<T>([AssertionCondition(AssertionConditionType.IS_NOT_NULL)] T? reference) where T : class
            => Debug.Assert(reference != null);

        [return: NotNullIfNotNull("value")]
        static T? PassThrough<T>(T? value) where T : class => value;

        static void CheckPassedThrough(string value)
        {
            var result = PassThrough(value);

            |Debug.Assert(result != null)|(57); // redundant
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(1): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(2): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(3): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(4): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(5): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(6): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(7): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(8): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(9): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(10): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(11): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(12): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(13): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(14): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(15): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(16): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(17): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(18): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(19): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(20): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(21): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(22): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(23): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(24): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(25): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(26): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(27): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(28): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(29): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(30): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(31): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(32): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(33): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(34): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(35): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(36): ReSharper Suggestion: Assertion is redundant because the expression is true here.
(37): ReSharper Suggestion: Assertion is redundant because the expression is true here.
(38): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(39): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(40): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(41): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(42): ReSharper Suggestion: Assertion is redundant because the expression is true here.
(43): ReSharper Suggestion: Assertion is redundant because the expression is true here.
(44): ReSharper Suggestion: Assertion is redundant because the expression is false here.
(45): ReSharper Suggestion: Assertion is redundant because the expression is null here.
(46): ReSharper Suggestion: Assertion is redundant because the expression is null here.
(47): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(48): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(49): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(50): ReSharper Suggestion: Assertion is redundant because the expression is true here.
(51): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(52): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(53): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(54): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(55): ReSharper Suggestion: Assertion is redundant because the expression is not null here.
(56): ReSharper Dead Code: Null-forgiving operator is redundant because the expression is not null here.
(57): ReSharper Suggestion: Assertion is redundant because the expression is true here.
