using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading.Tasks;

namespace ReCommendedExtension.Tests.test.data.Analyzers.Await
{
    public static class Test
    {
        public static async ValueTask Delay() => await Task.Delay(10);

        public static async ValueTask<T> Calc<T>(T x)
        {
            await Task.Delay(10);
            return x;
        }
    }

    public class AwaitForMethods
    {
        |async|(0) ValueTask Method()
        {
            if (Environment.UserInteractive)
            {
                Console.WriteLine();
            }

            |await|(1) Test.Delay();
        }

        |async|(2) ValueTask Method_WithConfigureAwait()
        {
            if (Environment.UserInteractive)
            {
                Console.WriteLine();
            }

            |await|(3) Test.Delay()|.ConfigureAwait(false)|(4);
        }

        |async|(5) ValueTask Method_AsExpressionBodied() => |await|(6) Test.Delay();

        |async|(7) ValueTask Method_AsExpressionBodied_WithConfigureAwait() => |await|(8) Test.Delay()|.ConfigureAwait(false)|(9);

        |async|(10) ValueTask<int> Method2()
        {
            if (Environment.UserInteractive)
            {
                Console.WriteLine();

                Action a = () => { return; };

                Action b = delegate { return; };
            }

            return |await|(11) Test.Calc(LocalFunction());

            int LocalFunction()
            {
                return 3;
            }
        }

        |async|(12) ValueTask<int> Method2_WithConfigureAwait()
        {
            if (Environment.UserInteractive)
            {
                Console.WriteLine();
            }

            return |await|(13) Test.Calc(LocalFunction())|.ConfigureAwait(false)|(14);

            int LocalFunction() => 3;
        }

        |async|(15) ValueTask<int> Method2_AsExpressionBodied() => |await|(16) Test.Calc(3);

        |async|(17) ValueTask<int> Method2_AsExpressionBodied_WithConfigureAwait() => |await|(18) Test.Calc(3)|.ConfigureAwait(false)|(19);

        async ValueTask<int> Method3()
        {
            if (Environment.UserInteractive)
            {
                return 3;
            }

            return await Test.Calc(5);
        }

        async ValueTask Method3_NoReturnValue()
        {
            if (Environment.UserInteractive)
            {
                return;
            }

            await Test.Delay();
        }

        async ValueTask Method4()
        {
            Console.WriteLine();
            await Test.Calc("one");
        }

        async ValueTask Method4_WithConfigureAwait()
        {
            Console.WriteLine();
            await Test.Calc("one").ConfigureAwait(false);
        }

        async ValueTask Method4_AsExpressionBodied() => await Test.Calc("one");

        async ValueTask Method4_AsExpressionBodied_WithConfigureAwait() => await Test.Calc("one").ConfigureAwait(false);

        async ValueTask<bool> Method_MultipleAwaits()
        {
            return await Test.Calc(await Test.Calc(false));
        }

        async ValueTask<bool> MethodA_MultipleAwaits_AsExpressionBodied() => await Test.Calc(await Test.Calc(false));

        async ValueTask Method_AwaitNonLast()
        {
            await Test.Delay();
            Console.WriteLine();
        }

        async ValueTask<object> Method_Covariant()
        {
            return await Test.Calc("one");
        }

        async ValueTask<object> Method_Covariant_AsExpressionBodied() => await Test.Calc("one");

        async ValueTask<IDictionary<int, IList<string>>> Method_Covariant_MoreComplex()
        {
            return await Test.Calc(new Dictionary<int, IList<string>>());
        }

        async ValueTask<IDictionary<int, IList<string>>> Method_Covariant_MoreComplex_AsExpressionBodied()
            => await Test.Calc(new Dictionary<int, IList<string>>());

        async ValueTask<IDictionary<int, IList<string>>> Method_Covariant_MoreComplex_AsExpressionBodied_WithConfigureAwait()
            => await Test.Calc(new Dictionary<int, IList<string>>()).ConfigureAwait(false);

        async ValueTask Method_AwaitNonValueTask()
        {
            await Task.Delay(10);
        }

        async ValueTask Method_AwaitNonValueTask_AsExpressionBodied() => await Task.Delay(10).ConfigureAwait(false);

        async ValueTask Method_UsingVar()
        {
            using var p = new Process();

            await Test.Calc(35);
        }

        async ValueTask Method_AwaitForEach(IAsyncEnumerable<int> items)
        {
            await foreach (var item in items)
            {
                Console.WriteLine(item);
            }

            await Test.Delay();
        }
    }

    public class AwaitForLambdaVariables
    {
        void Method()
        {
            Func<ValueTask> Method = |async|(20) () =>
            {
                if (Environment.UserInteractive)
                {
                    Console.WriteLine();
                }

                |await|(21) Test.Delay();
            };

            Func<ValueTask> Method_WithConfigureAwait = |async|(22) () =>
            {
                if (Environment.UserInteractive)
                {
                    Console.WriteLine();
                }

                |await|(23) Test.Delay()|.ConfigureAwait(false)|(24);
            };

            Func<ValueTask> Method_AsExpressionBodied = |async|(25) () => |await|(26) Test.Delay();

            Func<ValueTask> Method_AsExpressionBodied_WithConfigureAwait = |async|(27) () => |await|(28) Test.Delay()|.ConfigureAwait(false)|(29);

            Func<ValueTask<int>> Method2 = |async|(30) () =>
            {
                if (Environment.UserInteractive)
                {
                    Console.WriteLine();
                }

                return |await|(31) Test.Calc(LocalFunction());

                int LocalFunction() => 3;
            };

            Func<ValueTask<int>> Method2_WithConfigureAwait = |async|(32) () =>
            {
                if (Environment.UserInteractive)
                {
                    Console.WriteLine();
                }

                return |await|(33) Test.Calc(LocalFunction())|.ConfigureAwait(false)|(34);

                int LocalFunction() => 3;
            };

            Func<ValueTask<int>> Method2_AsExpressionBodied = |async|(35) () => |await|(36) Test.Calc(3);

            Func<ValueTask<int>> Method2_AsExpressionBodied_WithConfigureAwait = |async|(37) () => |await|(38) Test.Calc(3)|.ConfigureAwait(false)|(39);

            Func<ValueTask> Method4 = async () =>
            {
                Console.WriteLine();
                await Test.Calc("one");
            };

            Func<ValueTask> Method4_WithConfigureAwait = async () =>
            {
                Console.WriteLine();
                await Test.Calc("one").ConfigureAwait(false);
            };

            Func<ValueTask> Method4_AsExpressionBodied = async () => await Test.Calc("one");

            Func<ValueTask> Method4_AsExpressionBodied_WithConfigureAwait = async () => await Test.Calc("one").ConfigureAwait(false);

            Func<ValueTask<bool>> Method_MultipleAwaits = async () => { return await Test.Calc(await Test.Calc(false)); };

            Func<ValueTask<bool>> MethodA_MultipleAwaits_AsExpressionBodied = async () => await Test.Calc(await Test.Calc(false));

            Func<ValueTask> Method_AwaitNonLast = async () =>
            {
                await Test.Delay();
                Console.WriteLine();
            };

            Func<ValueTask<object>> Method_Covariant = async () => { return await Test.Calc("one"); };

            Func<ValueTask<object>> Method_Covariant_AsExpressionBodied = async () => await Test.Calc("one");

            Func<ValueTask<IDictionary<int, IList<string>>>> Method_Covariant_MoreComplex = async () =>
            {
                return await Test.Calc(new Dictionary<int, IList<string>>());
            };

            Func<ValueTask<IDictionary<int, IList<string>>>> Method_Covariant_MoreComplex_AsExpressionBodied = async ()
                => await Test.Calc(new Dictionary<int, IList<string>>());

            Func<ValueTask> Method_AwaitNonValueTask = async () => { await Task.Delay(10); };

            Func<ValueTask> Method_AwaitNonValueTask_AsExpressionBodied = async () => await Task.Delay(10);

            Func<ValueTask> Method_UsingVar = async () =>
            {
                using var p = new Process();

                await Test.Calc(35);
            };
        }
    }

    public class AwaitForLambdaFields
    {
        Func<ValueTask> Method = |async|(40) () =>
        {
            if (Environment.UserInteractive)
            {
                Console.WriteLine();
            }

            |await|(41) Test.Delay();
        };

        Func<ValueTask> Method_WithConfigureAwait = |async|(42) () =>
        {
            if (Environment.UserInteractive)
            {
                Console.WriteLine();
            }

            |await|(43) Test.Delay()|.ConfigureAwait(false)|(44);
        };

        Func<ValueTask> Method_AsExpressionBodied = |async|(45) () => |await|(46) Test.Delay();

        Func<ValueTask> Method_AsExpressionBodied_WithConfigureAwait = |async|(47) () => |await|(48) Test.Delay()|.ConfigureAwait(false)|(49);

        Func<ValueTask<int>> Method2 = |async|(50) () =>
        {
            if (Environment.UserInteractive)
            {
                Console.WriteLine();
            }

            return |await|(51) Test.Calc(LocalFunction());

            int LocalFunction() => 3;
        };

        Func<ValueTask<int>> Method2_WithConfigureAwait = |async|(52) () =>
        {
            if (Environment.UserInteractive)
            {
                Console.WriteLine();
            }

            return |await|(53) Test.Calc(LocalFunction())|.ConfigureAwait(false)|(54);

            int LocalFunction() => 3;
        };

        Func<ValueTask<int>> Method2_AsExpressionBodied = |async|(55) () => |await|(56) Test.Calc(3);

        Func<ValueTask<int>> Method2_AsExpressionBodied_WithConfigureAwait = |async|(57) () => |await|(58) Test.Calc(3)|.ConfigureAwait(false)|(59);

        Func<ValueTask> Method4 = async () =>
        {
            Console.WriteLine();
            await Test.Calc("one");
        };

        Func<ValueTask> Method4_WithConfigureAwait = async () =>
        {
            Console.WriteLine();
            await Test.Calc("one").ConfigureAwait(false);
        };

        Func<ValueTask> Method4_AsExpressionBodied = async () => await Test.Calc("one");

        Func<ValueTask> Method4_AsExpressionBodied_WithConfigureAwait = async () => await Test.Calc("one").ConfigureAwait(false);

        Func<ValueTask<bool>> Method_MultipleAwaits = async () => { return await Test.Calc(await Test.Calc(false)); };

        Func<ValueTask<bool>> MethodA_MultipleAwaits_AsExpressionBodied = async () => await Test.Calc(await Test.Calc(false));

        Func<ValueTask> Method_AwaitNonLast = async () =>
        {
            await Test.Delay();
            Console.WriteLine();
        };

        Func<ValueTask<object>> Method_Covariant = async () => { return await Test.Calc("one"); };

        Func<ValueTask<object>> Method_Covariant_AsExpressionBodied = async () => await Test.Calc("one");

        Func<ValueTask<IDictionary<int, IList<string>>>> Method_Covariant_MoreComplex = async () =>
        {
            return await Test.Calc(new Dictionary<int, IList<string>>());
        };

        Func<ValueTask<IDictionary<int, IList<string>>>> Method_Covariant_MoreComplex_AsExpressionBodied = async ()
            => await Test.Calc(new Dictionary<int, IList<string>>());

        Func<ValueTask> Method_AwaitNonValueTask = async () => { await Task.Delay(10); };

        Func<ValueTask> Method_AwaitNonValueTask_AsExpressionBodied = async () => await Task.Delay(10);

        Func<ValueTask> Method_UsingVar = async () =>
        {
            using var p = new Process();

            await Test.Calc(35);
        };
    }

    public class AwaitForAnonymousMethodVariables
    {
        void Method()
        {
            Func<ValueTask> Method = |async|(60) delegate
            {
                if (Environment.UserInteractive)
                {
                    Console.WriteLine();
                }

                |await|(61) Test.Delay();
            };

            Func<ValueTask> Method_WithConfigureAwait = |async|(62) delegate
            {
                if (Environment.UserInteractive)
                {
                    Console.WriteLine();
                }

                |await|(63) Test.Delay()|.ConfigureAwait(false)|(64);
            };

            Func<ValueTask<int>> Method2 = |async|(65) delegate
            {
                if (Environment.UserInteractive)
                {
                    Console.WriteLine();
                }

                return |await|(66) Test.Calc(LocalFunction());

                int LocalFunction() => 3;
            };

            Func<ValueTask<int>> Method2_WithConfigureAwait = |async|(67) delegate
            {
                if (Environment.UserInteractive)
                {
                    Console.WriteLine();
                }

                return |await|(68) Test.Calc(LocalFunction())|.ConfigureAwait(false)|(69);

                int LocalFunction() => 3;
            };

            Func<ValueTask> Method4 = async delegate
            {
                Console.WriteLine();
                await Test.Calc("one");
            };

            Func<ValueTask> Method4_WithConfigureAwait = async delegate
            {
                Console.WriteLine();
                await Test.Calc("one").ConfigureAwait(false);
            };

            Func<ValueTask<bool>> Method_MultipleAwaits = async delegate { return await Test.Calc(await Test.Calc(false)); };

            Func<ValueTask> Method_AwaitNonLast = async delegate
            {
                await Test.Delay();
                Console.WriteLine();
            };

            Func<ValueTask<object>> Method_Covariant = async delegate { return await Test.Calc("one"); };

            Func<ValueTask<IDictionary<int, IList<string>>>> Method_Covariant_MoreComplex = async delegate
            {
                return await Test.Calc(new Dictionary<int, IList<string>>());
            };

            Func<ValueTask> Method_AwaitNonValueTask = async delegate { await Task.Delay(10); };

            Func<ValueTask> Method_UsingVar = async delegate
            {
                using var p = new Process();

                await Test.Calc(35);
            };
        }
    }

    public class AwaitForAnonymousMethodFields
    {
        Func<ValueTask> Method = |async|(70) delegate
        {
            if (Environment.UserInteractive)
            {
                Console.WriteLine();
            }

            |await|(71) Test.Delay();
        };

        Func<ValueTask> Method_WithConfigureAwait = |async|(72) delegate
        {
            if (Environment.UserInteractive)
            {
                Console.WriteLine();
            }

            |await|(73) Test.Delay()|.ConfigureAwait(false)|(74);
        };

        Func<ValueTask<int>> Method2 = |async|(75) delegate
        {
            if (Environment.UserInteractive)
            {
                Console.WriteLine();
            }

            return |await|(76) Test.Calc(LocalFunction());

            int LocalFunction() => 3;
        };

        Func<ValueTask<int>> Method2_WithConfigureAwait = |async|(77) delegate
        {
            if (Environment.UserInteractive)
            {
                Console.WriteLine();
            }

            return |await|(78) Test.Calc(LocalFunction())|.ConfigureAwait(false)|(79);

            int LocalFunction() => 3;
        };

        Func<ValueTask> Method4 = async delegate
        {
            Console.WriteLine();
            await Test.Calc("one");
        };

        Func<ValueTask> Method4_WithConfigureAwait = async delegate
        {
            Console.WriteLine();
            await Test.Calc("one").ConfigureAwait(false);
        };

        Func<ValueTask<bool>> Method_MultipleAwaits = async delegate { return await Test.Calc(await Test.Calc(false)); };

        Func<ValueTask> Method_AwaitNonLast = async delegate
        {
            await Test.Delay();
            Console.WriteLine();
        };

        Func<ValueTask<object>> Method_Covariant = async delegate { return await Test.Calc("one"); };

        Func<ValueTask<IDictionary<int, IList<string>>>> Method_Covariant_MoreComplex = async delegate
        {
            return await Test.Calc(new Dictionary<int, IList<string>>());
        };

        Func<ValueTask> Method_AwaitNonValueTask = async delegate { await Task.Delay(10); };

        Func<ValueTask> Method_UsingVar = async delegate
        {
            using var p = new Process();

            await Test.Calc(35);
        };
    }

    public class AwaitForLocalFunctions
    {
        void Method()
        {
            |async|(80) ValueTask Method()
            {
                if (Environment.UserInteractive)
                {
                    Console.WriteLine();
                }

                |await|(81) Test.Delay();
            }

            |async|(82) ValueTask Method_WithConfigureAwait()
            {
                if (Environment.UserInteractive)
                {
                    Console.WriteLine();
                }

                |await|(83) Test.Delay()|.ConfigureAwait(false)|(84);
            }

            |async|(85) ValueTask Method_AsExpressionBodied() => |await|(86) Test.Delay();

            |async|(87) ValueTask Method_AsExpressionBodied_WithConfigureAwait() => |await|(88) Test.Delay()|.ConfigureAwait(false)|(89);

            |async|(90) ValueTask<int> Method2()
            {
                if (Environment.UserInteractive)
                {
                    Console.WriteLine();
                }

                return |await|(91) Test.Calc(LocalFunction());

                int LocalFunction() => 3;
            }

            |async|(92) ValueTask<int> Method2_WithConfigureAwait()
            {
                if (Environment.UserInteractive)
                {
                    Console.WriteLine();
                }

                return |await|(93) Test.Calc(LocalFunction())|.ConfigureAwait(false)|(94);

                int LocalFunction() => 3;
            }

            |async|(95) ValueTask<int> Method2_AsExpressionBodied() => |await|(96) Test.Calc(3);

            |async|(97) ValueTask<int> Method2_AsExpressionBodied_WithConfigureAwait() => |await|(98) Test.Calc(3)|.ConfigureAwait(false)|(99);

            async ValueTask Method4()
            {
                Console.WriteLine();
                await Test.Calc("one");
            }

            async ValueTask Method4_WithConfigureAwait()
            {
                Console.WriteLine();
                await Test.Calc("one").ConfigureAwait(false);
            }

            async ValueTask Method4_AsExpressionBodied() => await Test.Calc("one");

            async ValueTask Method4_AsExpressionBodied_WithConfigureAwait() => await Test.Calc("one").ConfigureAwait(false);

            async ValueTask<bool> Method_MultipleAwaits()
            {
                return await Test.Calc(await Test.Calc(false));
            }

            async ValueTask<bool> MethodA_MultipleAwaits_AsExpressionBodied() => await Test.Calc(await Test.Calc(false));

            async ValueTask Method_AwaitNonLast()
            {
                await Test.Delay();
                Console.WriteLine();
            }

            async ValueTask<object> Method_Covariant()
            {
                return await Test.Calc("one");
            }

            async ValueTask<object> Method_Covariant_AsExpressionBodied() => await Test.Calc("one");

            async ValueTask<IDictionary<int, IList<string>>> Method_Covariant_MoreComplex()
            {
                return await Test.Calc(new Dictionary<int, IList<string>>());
            }

            async ValueTask<IDictionary<int, IList<string>>> Method_Covariant_MoreComplex_AsExpressionBodied()
                => await Test.Calc(new Dictionary<int, IList<string>>());

            async ValueTask Method_AwaitNonValueTask()
            {
                await Task.Delay(10);
            }

            async ValueTask Method_AwaitNonValueTask_AsExpressionBodied() => await Task.Delay(10);

            async ValueTask Method_UsingVar()
            {
                using var p = new Process();

                await Test.Calc(35);
            }

            |async|(100) ValueTask Method_ForEach(IEnumerable<int> items)
            {
                foreach (var item in items)
                {
                    Console.WriteLine(item);
                }

                |await|(101) Test.Delay();
            }
        }
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(1): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(2): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(3): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(4): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(5): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(6): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(7): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(8): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(9): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(10): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(11): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(12): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(13): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(14): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(15): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(16): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(17): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(18): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(19): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(20): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(21): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(22): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(23): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(24): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(25): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(26): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(27): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(28): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(29): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(30): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(31): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(32): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(33): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(34): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(35): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(36): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(37): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(38): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(39): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(40): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(41): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(42): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(43): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(44): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(45): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(46): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(47): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(48): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(49): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(50): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(51): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(52): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(53): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(54): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(55): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(56): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(57): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(58): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(59): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(60): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(61): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(62): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(63): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(64): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(65): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(66): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(67): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(68): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(69): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(70): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(71): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(72): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(73): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(74): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(75): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(76): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(77): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(78): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(79): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(80): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(81): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(82): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(83): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(84): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(85): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(86): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(87): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(88): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(89): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(90): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(91): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(92): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(93): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(94): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(95): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(96): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(97): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(98): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(99): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await'/'ConfigureAwait(...)')
(100): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
(101): ReSharper Dead Code: Redundant 'await' (remove 'async'/'await')
