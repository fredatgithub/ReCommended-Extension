using System;
using System.Diagnostics;
using System.Threading.Tasks;

namespace ReCommendedExtension.Tests.test.data.Analyzers.Await
{
    internal static class ValueTasks
    {
        public static ValueTask Delay(int millisecondsDelay) => throw new NotImplementedException();
        public static ValueTask<T> FromResult<T>(T result) => new ValueTask<T>(result);
    }

    public class AwaitForMethods
    {
        async ValueTask Method()
        {
            await ValueTasks.Delay(10);
            |await|(0) ValueTasks.Delay(20);
        }

        async ValueTask Method2()
        {
            if (Environment.UserInteractive)
            {
                await ValueTasks.Delay(10);
            }

            |await|(1) ValueTasks.Delay(20);

            int LocalFunction()
            {
                return 4;
            }
        }

        async ValueTask Method3() => await ValueTasks.Delay(10);

        async ValueTask<int> Method4()
        {
            if (Environment.UserInteractive)
            {
                return |await|(2) ValueTasks.FromResult(3);
            }

            await ValueTasks.Delay(10);
            return |await|(3) ValueTasks.FromResult(4);
        }

        async ValueTask<int> Method5()
        {
            await ValueTasks.Delay(10);
            return |await|(4) ValueTasks.FromResult(3);

            int LocalFunction() => 4;
        }

        async ValueTask Method6() => |await|(5) ValueTasks.FromResult(3);

        async ValueTask<int> Method7() => await ValueTasks.FromResult(3);

        async ValueTask<int> Method_AwaitNonLast()
        {
            await ValueTasks.Delay(10);
            await ValueTasks.Delay(20);

            return 3;
        }

        async ValueTask Method2_AwaitNonLast()
        {
            using (new Process())
            {
                await ValueTasks.Delay(10);
                await ValueTasks.Delay(20);
            }
        }

        async ValueTask<int> Method3_AwaitNonLast()
        {
            await ValueTasks.Delay(10);
            var result = await ValueTasks.FromResult(3);
            return result;
        }

        async ValueTask Method_WithConfigureAwait()
        {
            await ValueTasks.Delay(10).ConfigureAwait(false);
        }

        async ValueTask Method_WithConfigureAwait_AsExpressionBodied() => await ValueTasks.Delay(10).ConfigureAwait(false);

        async ValueTask<int> Method_NestedInUsingScope()
        {
            using (new Process())
            {
                return await ValueTasks.FromResult(3);
            }
        }

        async ValueTask<int> Method_NestedInUsingScope(int x)
        {
            using (new Process())
            {
                if (x > 2)
                {
                    return await ValueTasks.FromResult(3);
                }
            }
        }

        async ValueTask<int> Method_UsingDeclaration()
        {
            using var p = new Process();

            return await ValueTasks.FromResult(35);
        }

        async ValueTask<int> Method_UsingDeclaration(int x)
        {
            using var p = new Process();

            if (x > 2)
            {
                return await ValueTasks.FromResult(3);
            }
        }

        async ValueTask<int> Method_NestedInTryBlock()
        {
            try
            {
                return await ValueTasks.FromResult(3);
            }
            catch
            {
                throw;
            }
        }

        async ValueTask<int> Method_NestedInTryBlock(int x)
        {
            try
            {
                if (x > 2)
                {
                    return await ValueTasks.FromResult(3);
                }
            }
            catch
            {
                throw;
            }
        }
    }

    public class AwaitForLambdaVariables
    {
        void Method()
        {
            Func<ValueTask> Method = async () =>
            {
                await ValueTasks.Delay(10);
                |await|(6) ValueTasks.Delay(20);
            };

            Func<ValueTask> Method2 = async () =>
            {
                if (Environment.UserInteractive)
                {
                    await ValueTasks.Delay(10);
                }

                |await|(7) ValueTasks.Delay(20);

                int LocalFunction()
                {
                    return 4;
                }
            };

            Func<ValueTask> Method3 = async () => await ValueTasks.Delay(10);

            Func<ValueTask<int>> Method4 = async () =>
            {
                if (Environment.UserInteractive)
                {
                    return |await|(8) ValueTasks.FromResult(3);
                }

                await ValueTasks.Delay(10);
                return |await|(9) ValueTasks.FromResult(4);
            };

            Func<ValueTask<int>> Method5 = async () =>
            {
                await ValueTasks.Delay(10);
                return |await|(10) ValueTasks.FromResult(3);

                int LocalFunction() => 4;
            };

            Func<ValueTask> Method6 = async () => |await|(11) ValueTasks.FromResult(3);

            Func<ValueTask<int>> Method7 = async () => await ValueTasks.FromResult(3);

            Func<ValueTask<int>> Method_AwaitNonLast = async () =>
            {
                await ValueTasks.Delay(10);
                await ValueTasks.Delay(20);

                return 3;
            };

            Func<ValueTask> Method2_AwaitNonLast = async () =>
            {
                using (new Process())
                {
                    await ValueTasks.Delay(10);
                    await ValueTasks.Delay(20);
                }
            };

            Func<ValueTask<int>> Method3_AwaitNonLast = async () =>
            {
                await ValueTasks.Delay(10);
                var result = await ValueTasks.FromResult(3);
                return result;
            };

            Func<ValueTask> Method_WithConfigureAwait = async () => { await ValueTasks.Delay(10).ConfigureAwait(false); };

            Func<ValueTask> Method_WithConfigureAwait_AsExpressionBodied = async () => await ValueTasks.Delay(10).ConfigureAwait(false);

            Func<ValueTask<int>> Method_NestedInUsingScope = async () =>
            {
                using (new Process())
                {
                    return await ValueTasks.FromResult(3);
                }
            };

            Func<ValueTask<int>> Method_NestedInUsingScope = async (int x) =>
            {
                using (new Process())
                {
                    if (x > 2)
                    {
                        return await ValueTasks.FromResult(3);
                    }
                }
            };

            Func<ValueTask<int>> Method_UsingDeclaration = async () =>
            {
                using var p = new Process();

                return await ValueTasks.FromResult(3);
            };

            Func<ValueTask<int>> Method_UsingDeclaration = async (int x) =>
            {
                using var p = new Process();

                if (x > 2)
                {
                    return await ValueTasks.FromResult(3);
                }
            };

            Func<ValueTask<int>> Method_NestedInTryBlock = async () =>
            {
                try
                {
                    return await ValueTasks.FromResult(3);
                }
                catch
                {
                    throw;
                }
            };

            Func<ValueTask<int>> Method_NestedInTryBlock = async (int x) =>
            {
                try
                {
                    if (x > 2)
                    {
                        return await ValueTasks.FromResult(3);
                    }
                }
                catch
                {
                    throw;
                }
            };
        }
    }

    public class AwaitForLambdaFields
    {
        Func<ValueTask> Method = async () =>
        {
            await ValueTasks.Delay(10);
            |await|(12) ValueTasks.Delay(20);
        };

        Func<ValueTask> Method2 = async () =>
        {
            if (Environment.UserInteractive)
            {
                await ValueTasks.Delay(10);
            }

            |await|(13) ValueTasks.Delay(20);

            int LocalFunction()
            {
                return 4;
            }
        };

        Func<ValueTask> Method3 = async () => await ValueTasks.Delay(10);

        Func<ValueTask<int>> Method4 = async () =>
        {
            if (Environment.UserInteractive)
            {
                return |await|(14) ValueTasks.FromResult(3);
            }

            await ValueTasks.Delay(10);
            return |await|(15) ValueTasks.FromResult(4);
        };

        Func<ValueTask<int>> Method5 = async () =>
        {
            await ValueTasks.Delay(10);
            return |await|(16) ValueTasks.FromResult(3);

            int LocalFunction() => 4;
        };

        Func<ValueTask> Method6 = async () => |await|(17) ValueTasks.FromResult(3);

        Func<ValueTask<int>> Method7 = async () => await ValueTasks.FromResult(3);

        Func<ValueTask<int>> Method_AwaitNonLast = async () =>
        {
            await ValueTasks.Delay(10);
            await ValueTasks.Delay(20);

            return 3;
        };

        Func<ValueTask> Method2_AwaitNonLast = async () =>
        {
            using (new Process())
            {
                await ValueTasks.Delay(10);
                await ValueTasks.Delay(20);
            }
        };

        Func<ValueTask<int>> Method3_AwaitNonLast = async () =>
        {
            await ValueTasks.Delay(10);
            var result = await ValueTasks.FromResult(3);
            return result;
        };

        Func<ValueTask> Method_WithConfigureAwait = async () => { await ValueTasks.Delay(10).ConfigureAwait(false); };

        Func<ValueTask> Method_WithConfigureAwait_AsExpressionBodied = async () => await ValueTasks.Delay(10).ConfigureAwait(false);

        Func<ValueTask<int>> Method_NestedInUsingScope = async () =>
        {
            using (new Process())
            {
                return await ValueTasks.FromResult(3);
            }
        };

        Func<ValueTask<int>> Method_NestedInUsingScope = async (int x) =>
        {
            using (new Process())
            {
                if (x > 2)
                {
                    return await ValueTasks.FromResult(3);
                }
            }
        };

        Func<ValueTask<int>> Method_UsingDeclaration = async () =>
        {
            using var p = new Process();

            return await ValueTasks.FromResult(3);
        };

        Func<ValueTask<int>> Method_UsingDeclaration = async (int x) =>
        {
            using var p = new Process();

            if (x > 2)
            {
                return await ValueTasks.FromResult(3);
            }
        };

        Func<ValueTask<int>> Method_NestedInTryBlock = async () =>
        {
            try
            {
                return await ValueTasks.FromResult(3);
            }
            catch
            {
                throw;
            }
        };

        Func<ValueTask<int>> Method_NestedInTryBlock = async (int x) =>
        {
            try
            {
                if (x > 2)
                {
                    return await ValueTasks.FromResult(3);
                }
            }
            catch
            {
                throw;
            }
        };
    }

    public class AwaitForAnonymousMethodVariables
    {
        void Method()
        {
            Func<ValueTask> Method = async delegate
            {
                await ValueTasks.Delay(10);
                |await|(18) ValueTasks.Delay(20);
            };

            Func<ValueTask> Method2 = async delegate
            {
                if (Environment.UserInteractive)
                {
                    await ValueTasks.Delay(10);
                }

                |await|(19) ValueTasks.Delay(20);

                int LocalFunction()
                {
                    return 4;
                }
            };

            Func<ValueTask> Method3 = async delegate { await ValueTasks.Delay(10); };

            Func<ValueTask<int>> Method4 = async delegate
            {
                if (Environment.UserInteractive)
                {
                    return |await|(20) ValueTasks.FromResult(3);
                }

                await ValueTasks.Delay(10);
                return |await|(21) ValueTasks.FromResult(4);
            };

            Func<ValueTask<int>> Method5 = async delegate
            {
                await ValueTasks.Delay(10);
                return |await|(22) ValueTasks.FromResult(3);

                int LocalFunction() => 4;
            };

            Func<ValueTask> Method6 = async delegate { |await|(23) ValueTasks.FromResult(3); };

            Func<ValueTask<int>> Method7 = async delegate { return await ValueTasks.FromResult(3); };

            Func<ValueTask<int>> Method_AwaitNonLast = async delegate
            {
                await ValueTasks.Delay(10);
                await ValueTasks.Delay(20);

                return 3;
            };

            Func<ValueTask> Method2_AwaitNonLast = async delegate
            {
                using (new Process())
                {
                    await ValueTasks.Delay(10);
                    await ValueTasks.Delay(20);
                }
            };

            Func<ValueTask<int>> Method3_AwaitNonLast = async delegate
            {
                await ValueTasks.Delay(10);
                var result = await ValueTasks.FromResult(3);
                return result;
            };

            Func<ValueTask> Method_WithConfigureAwait = async delegate { await ValueTasks.Delay(10).ConfigureAwait(false); };

            Func<ValueTask> Method_WithConfigureAwait_AsExpressionBodied = async delegate { await ValueTasks.Delay(10).ConfigureAwait(false); };

            Func<ValueTask<int>> Method_NestedInUsingScope = async delegate
            {
                using (new Process())
                {
                    return await ValueTasks.FromResult(3);
                }
            };

            Func<ValueTask<int>> Method_NestedInUsingScope = async delegate(int x)
            {
                using (new Process())
                {
                    if (x > 2)
                    {
                        return await ValueTasks.FromResult(3);
                    }
                }
            };

            Func<ValueTask<int>> Method_UsingDeclaration = async delegate
            {
                using var p = new Process();

                return await ValueTasks.FromResult(3);
            };

            Func<ValueTask<int>> Method_UsingDeclaration = async delegate(int x)
            {
                using var p = new Process();

                if (x > 2)
                {
                    return await ValueTasks.FromResult(3);
                }
            };

            Func<ValueTask<int>> Method_NestedInTryBlock = async delegate
            {
                try
                {
                    return await ValueTasks.FromResult(3);
                }
                catch
                {
                    throw;
                }
            };

            Func<ValueTask<int>> Method_NestedInTryBlock = async delegate(int x)
            {
                try
                {
                    if (x > 2)
                    {
                        return await ValueTasks.FromResult(3);
                    }
                }
                catch
                {
                    throw;
                }
            };
        }
    }

    public class AwaitForAnonymousMethodFields
    {
        Func<ValueTask> Method = async delegate
        {
            await ValueTasks.Delay(10);
            |await|(24) ValueTasks.Delay(20);
        };

        Func<ValueTask> Method2 = async delegate
        {
            if (Environment.UserInteractive)
            {
                await ValueTasks.Delay(10);
            }

            |await|(25) ValueTasks.Delay(20);

            int LocalFunction()
            {
                return 4;
            }
        };

        Func<ValueTask> Method3 = async delegate { await ValueTasks.Delay(10); };

        Func<ValueTask<int>> Method4 = async delegate
        {
            if (Environment.UserInteractive)
            {
                return |await|(26) ValueTasks.FromResult(3);
            }

            await ValueTasks.Delay(10);
            return |await|(27) ValueTasks.FromResult(4);
        };

        Func<ValueTask<int>> Method5 = async delegate
        {
            await ValueTasks.Delay(10);
            return |await|(28) ValueTasks.FromResult(3);

            int LocalFunction() => 4;
        };

        Func<ValueTask> Method6 = async delegate { |await|(29) ValueTasks.FromResult(3); };

        Func<ValueTask<int>> Method7 = async delegate { return await ValueTasks.FromResult(3); };

        Func<ValueTask<int>> Method_AwaitNonLast = async delegate
        {
            await ValueTasks.Delay(10);
            await ValueTasks.Delay(20);

            return 3;
        };

        Func<ValueTask> Method2_AwaitNonLast = async delegate
        {
            using (new Process())
            {
                await ValueTasks.Delay(10);
                await ValueTasks.Delay(20);
            }
        };

        Func<ValueTask<int>> Method3_AwaitNonLast = async delegate
        {
            await ValueTasks.Delay(10);
            var result = await ValueTasks.FromResult(3);
            return result;
        };

        Func<ValueTask> Method_WithConfigureAwait = async delegate { await ValueTasks.Delay(10).ConfigureAwait(false); };

        Func<ValueTask> Method_WithConfigureAwait_AsExpressionBodied = async delegate { await ValueTasks.Delay(10).ConfigureAwait(false); };

        Func<ValueTask<int>> Method_NestedInUsingScope = async delegate
        {
            using (new Process())
            {
                return await ValueTasks.FromResult(3);
            }
        };

        Func<ValueTask<int>> Method_NestedInUsingScope = async delegate(int x)
        {
            using (new Process())
            {
                if (x > 2)
                {
                    return await ValueTasks.FromResult(3);
                }
            }
        };

        Func<ValueTask<int>> Method_UsingDeclaration = async delegate
        {
            using var p = new Process();

            return await ValueTasks.FromResult(3);
        };

        Func<ValueTask<int>> Method_UsingDeclaration = async delegate(int x)
        {
            using var p = new Process();

            if (x > 2)
            {
                return await ValueTasks.FromResult(3);
            }
        };

        Func<ValueTask<int>> Method_NestedInTryBlock = async delegate
        {
            try
            {
                return await ValueTasks.FromResult(3);
            }
            catch
            {
                throw;
            }
        };

        Func<ValueTask<int>> Method_NestedInTryBlock = async delegate(int x)
        {
            try
            {
                if (x > 2)
                {
                    return await ValueTasks.FromResult(3);
                }
            }
            catch
            {
                throw;
            }
        };
    }

    public class AwaitForLocalFunctions
    {
        void Method()
        {
            async ValueTask Method()
            {
                await ValueTasks.Delay(10);
                |await|(30) ValueTasks.Delay(20);
            }

            async ValueTask Method2()
            {
                if (Environment.UserInteractive)
                {
                    await ValueTasks.Delay(10);
                }

                |await|(31) ValueTasks.Delay(20);

                int LocalFunction()
                {
                    return 4;
                }
            }

            async ValueTask Method3() => await ValueTasks.Delay(10);

            async ValueTask<int> Method4()
            {
                if (Environment.UserInteractive)
                {
                    return |await|(32) ValueTasks.FromResult(3);
                }

                await ValueTasks.Delay(10);
                return |await|(33) ValueTasks.FromResult(4);
            }

            async ValueTask<int> Method5()
            {
                await ValueTasks.Delay(10);
                return |await|(34) ValueTasks.FromResult(3);

                int LocalFunction() => 4;
            }

            async ValueTask Method6() => |await|(35) ValueTasks.FromResult(3);

            async ValueTask<int> Method7() => await ValueTasks.FromResult(3);

            async ValueTask<int> Method_AwaitNonLast()
            {
                await ValueTasks.Delay(10);
                await ValueTasks.Delay(20);

                return 3;
            }

            async ValueTask Method2_AwaitNonLast()
            {
                using (new Process())
                {
                    await ValueTasks.Delay(10);
                    await ValueTasks.Delay(20);
                }
            }

            async ValueTask<int> Method3_AwaitNonLast()
            {
                await ValueTasks.Delay(10);
                var result = await ValueTasks.FromResult(3);
                return result;
            }

            async ValueTask Method_WithConfigureAwait()
            {
                await ValueTasks.Delay(10).ConfigureAwait(false);
            }

            async ValueTask Method_WithConfigureAwait_AsExpressionBodied() => await ValueTasks.Delay(10).ConfigureAwait(false);

            async ValueTask<int> Method_NestedInUsingScope()
            {
                using (new Process())
                {
                    return await ValueTasks.FromResult(3);
                }
            }

            async ValueTask<int> Method_NestedInUsingScope(int x)
            {
                using (new Process())
                {
                    if (x > 2)
                    {
                        return await ValueTasks.FromResult(3);
                    }
                }
            }

            async ValueTask<int> Method_UsingDeclaration()
            {
                using var p = new Process();

                return await ValueTasks.FromResult(3);
            }

            async ValueTask<int> Method_UsingDeclaration(int x)
            {
                using var p = new Process();

                if (x > 2)
                {
                    return await ValueTasks.FromResult(3);
                }
            }

            async ValueTask<int> Method_NestedInTryBlock()
            {
                try
                {
                    return await ValueTasks.FromResult(3);
                }
                catch
                {
                    throw;
                }
            }

            async ValueTask<int> Method_NestedInTryBlock(int x)
            {
                try
                {
                    if (x > 2)
                    {
                        return await ValueTasks.FromResult(3);
                    }
                }
                catch
                {
                    throw;
                }
            }
        }
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(1): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(2): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(3): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(4): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(5): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(6): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(7): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(8): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(9): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(10): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(11): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(12): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(13): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(14): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(15): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(16): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(17): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(18): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(19): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(20): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(21): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(22): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(23): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(24): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(25): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(26): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(27): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(28): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(29): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(30): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(31): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(32): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(33): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(34): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
(35): ReSharper Suggestion: Redundant captured context (add '.ConfigureAwait(false)')
