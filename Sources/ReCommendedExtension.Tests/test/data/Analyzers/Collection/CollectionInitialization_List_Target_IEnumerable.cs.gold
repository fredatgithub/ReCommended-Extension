using System;
using System.Collections.Generic;

namespace TargetEnumerable
{
    public class NonGenericClass
    {
        IEnumerable<int> field01 = |new|(0) List<int>();
        IEnumerable<int> field02 = |new|(1) List<int>() { 1, 2, 3 };
        IEnumerable<int> field03 = |new|(2) List<int>(8);
        IEnumerable<int> field04 = |new|(3) List<int>(8) { 1, 2, 3 };

        void Method(int a, int b, int c, IEnumerable<int> seq)
        {
            IEnumerable<int> var01 = |new|(4) List<int>();
            IEnumerable<int> var02 = |new|(5) List<int> { a, b, c };
            IEnumerable<int> var03 = |new|(6) List<int>(8);
            IEnumerable<int> var04 = |new|(7) List<int>(8) { a, b, c };
            IEnumerable<int> var05 = |new|(8) List<int>(seq);
            IEnumerable<int> var06 = |new|(9) List<int>(seq) { a, b, c };

            Consumer(|new|(10) List<int>());
            Consumer(|new|(11) List<int> { a, b, c });
            Consumer(|new|(12) List<int>(8));
            Consumer(|new|(13) List<int>(8) { a, b, c });
            Consumer(|new|(14) List<int>(seq));
            Consumer(|new|(15) List<int>(seq) { a, b, c });

            ConsumerGeneric(|new|(16) List<int>());
            ConsumerGeneric(|new|(17) List<int> { a, b, c });
            ConsumerGeneric<int>(|new|(18) List<int>(8));
            ConsumerGeneric<int>(|new|(19) List<int>(8) { a, b, c });
            ConsumerGeneric(|new|(20) List<int>(seq));
            ConsumerGeneric(|new|(21) List<int>(seq) { a, b, c });
        }

        void Consumer(IEnumerable<int> items) { }
        void ConsumerGeneric<T>(IEnumerable<T> items) { }

        IEnumerable<int> Property01 { get; } = |new|(22) List<int>();
        IEnumerable<int> Property02 { get; } = |new|(23) List<int> { 1, 2, 3 };
        IEnumerable<int> Property03 { get; set; } = |new|(24) List<int>(8);
        IEnumerable<int> Property04 { get; set; } = |new|(25) List<int>(8) { 1, 2, 3 };
    }

    public class GenericClass<T> where T : new()
    {
        IEnumerable<T> field01 = |new|(26) List<T>();
        IEnumerable<T> field02 = |new|(27) List<T> { default, default(T), new() };
        IEnumerable<T> field03 = |new|(28) List<T>(8);
        IEnumerable<T> field04 = |new|(29) List<T>(8) { default, default(T), new() };

        void Method(T a, T b, T c, IEnumerable<T> seq)
        {
            IEnumerable<T> var01 = |new|(30) List<T>();
            IEnumerable<T> var02 = |new|(31) List<T> { a, b, c };
            IEnumerable<T> var03 = |new|(32) List<T>(8);
            IEnumerable<T> var04 = |new|(33) List<T>(8) { a, b, c };
            IEnumerable<T> var05 = |new|(34) List<T>(seq);
            IEnumerable<T> var06 = |new|(35) List<T>(seq) { a, b, c };

            Consumer(|new|(36) List<T>());
            Consumer(|new|(37) List<T> { a, b, c });
            Consumer(|new|(38) List<T>(8));
            Consumer(|new|(39) List<T>(8) { a, b, c });
            Consumer(|new|(40) List<T>(seq));
            Consumer(|new|(41) List<T>(seq) { a, b, c });
        }

        void Consumer(IEnumerable<T> items) { }

        IEnumerable<T> Property01 { get; } = |new|(42) List<T>();
        IEnumerable<T> Property02 { get; } = |new|(43) List<T> { default, default(T), new() };
        IEnumerable<T> Property03 { get; set; } = |new|(44) List<T>(8);
        IEnumerable<T> Property04 { get; set; } = |new|(45) List<T>(8) { default, default(T), new() };
    }

    internal class A { }
    internal class B(int x = 0) : A { }

    public class InferenceClass
    {
        IEnumerable<A> field01 = |new|(46) List<B>();
        IEnumerable<A> field02 = new List<B>() { new(1), new(2), new(3) };
        IEnumerable<A> field03 = |new|(47) List<B>(8);
        IEnumerable<A> field04 = |new|(48) List<B>(8) { new B(1), new B(2), new B(3) };

        void Method(B a, B b, B c, IEnumerable<B> seq)
        {
            IEnumerable<A> var01 = |new|(49) List<B>();
            IEnumerable<A> var02 = |new|(50) List<B> { a, b, c };
            IEnumerable<A> var03 = |new|(51) List<B>(8);
            IEnumerable<A> var04 = |new|(52) List<B>(8) { a, b, c };
            IEnumerable<A> var05 = |new|(53) List<B>(seq);
            IEnumerable<A> var06 = |new|(54) List<B>(seq) { a, b, c };

            Consumer(|new|(55) List<B>());
            Consumer(|new|(56) List<B> { a, b, c });
            Consumer(|new|(57) List<B>(8));
            Consumer(|new|(58) List<B>(8) { a, b, c });
            Consumer(|new|(59) List<B>(seq));
            Consumer(|new|(60) List<B>(seq) { a, b, c });
        }

        void Consumer(IEnumerable<A> items) { }

        IEnumerable<A> Property01 { get; } = |new|(61) List<B>();
        IEnumerable<A> Property02 { get; } = new List<B> { new(1), new(2), new(3) };
        IEnumerable<A> Property03 { get; set; } = |new|(62) List<B>(8);
        IEnumerable<A> Property04 { get; set; } = |new|(63) List<B>(8) { new B(1), new B(2), new B(3) };
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: Use collection expression ('int[]' will be used).
(1): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(2): ReSharper Suggestion: Use collection expression ('int[]' will be used).
(3): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(4): ReSharper Suggestion: Use collection expression ('int[]' will be used).
(5): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(6): ReSharper Suggestion: Use collection expression ('int[]' will be used).
(7): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(8): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(9): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(10): ReSharper Suggestion: Use collection expression ('int[]' will be used).
(11): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(12): ReSharper Suggestion: Use collection expression ('int[]' will be used).
(13): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(14): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(15): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(16): ReSharper Suggestion: Use collection expression ('int[]' will be used).
(17): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(18): ReSharper Suggestion: Use collection expression ('int[]' will be used).
(19): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(20): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(21): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(22): ReSharper Suggestion: Use collection expression ('int[]' will be used).
(23): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(24): ReSharper Suggestion: Use collection expression ('int[]' will be used).
(25): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(26): ReSharper Suggestion: Use collection expression ('T[]' will be used).
(27): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(28): ReSharper Suggestion: Use collection expression ('T[]' will be used).
(29): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(30): ReSharper Suggestion: Use collection expression ('T[]' will be used).
(31): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(32): ReSharper Suggestion: Use collection expression ('T[]' will be used).
(33): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(34): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(35): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(36): ReSharper Suggestion: Use collection expression ('T[]' will be used).
(37): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(38): ReSharper Suggestion: Use collection expression ('T[]' will be used).
(39): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(40): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(41): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(42): ReSharper Suggestion: Use collection expression ('T[]' will be used).
(43): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(44): ReSharper Suggestion: Use collection expression ('T[]' will be used).
(45): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(46): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(47): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(48): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(49): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(50): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(51): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(52): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(53): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(54): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(55): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(56): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(57): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(58): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(59): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(60): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
(61): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(62): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(63): ReSharper Suggestion: Use collection expression (a compiler-synthesized read-only collection will be used).
