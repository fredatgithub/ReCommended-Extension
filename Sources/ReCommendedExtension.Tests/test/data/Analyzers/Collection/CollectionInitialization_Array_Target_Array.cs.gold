using System;

namespace TargetArray
{
    public class NonGenericClass
    {
        int[] field01 = |new int[]|(0) { };
        int[] field02 = |new int[]|(1) { 1, 2, 3 };
        int[] field03 = ||new int[0]|(3) { }|(2);
        int[] field04 = |new int[3]|(4) { 1, 2, 3 };
        int[] field05 = ||new int[0]|(5)|(6);
        int[] field06 = new int[3];
        int[] field07 = |new[]|(7) { 1, 2, 3 };
        int[] field08 = |{ }|(8);
        int[] field09 = |{|(9) 1, 2, 3 };
        int[] field10 = |Array.Empty<int>()|(10);

        void Method(int a, int b, int c)
        {
            int[] var01 = |new int[]|(11) { };
            int[] var02 = |new int[]|(12) { a, b, c };
            int[] var03 = ||new int[0]|(14) { }|(13);
            int[] var04 = |new int[3]|(15) { a, b, c };
            int[] var05 = ||new int[0]|(16)|(17);
            int[] var06 = new int[3];
            int[] var07 = |new[]|(18) { a, b, c };
            int[] var08 = |{ }|(19);
            int[] var09 = |{|(20) a, b, c };
            int[] var10 = |Array.Empty<int>()|(21);

            Consumer(|new int[]|(22) { });
            Consumer(|new int[]|(23) { a, b, c });
            Consumer(||new int[0]|(25) { }|(24));
            Consumer(|new int[3]|(26) { a, b, c });
            Consumer(||new int[0]|(27)|(28));
            Consumer(new int[3]);
            Consumer(|new[]|(29) { a, b, c });
            Consumer(|Array.Empty<int>()|(30));

            ConsumerGeneric(|new int[]|(31) { });
            ConsumerGeneric(|new int[]|(32) { a, b, c });
            ConsumerGeneric<int>(||new int[0]|(34) { }|(33));
            ConsumerGeneric(|new int[3]|(35) { a, b, c });
            ConsumerGeneric(||new int[0]|(36)|(37));
            ConsumerGeneric(new int[3]);
            ConsumerGeneric(|new[]|(38) { a, b, c });
            ConsumerGeneric(|Array.Empty<int>()|(39));
        }

        void Consumer(int[] items) { }
        void ConsumerGeneric<T>(T[] items) { }

        int[] Property01 { get; } = |new int[]|(40) { };
        int[] Property02 { get; } = |new int[]|(41) { 1, 2, 3 };
        int[] Property03 { get; set; } = ||new int[0]|(43) { }|(42);
        int[] Property04 { get; set; } = |new int[3]|(44) { 1, 2, 3 };
        int[] Property05 => ||new int[0]|(45)|(46);
        int[] Property06 => new int[3];
        int[] Property07 => |new[]|(47) { 1, 2, 3 };
        int[] Property08 { get; } = |{ }|(48);
        int[] Property09 { get; set; } = |{|(49) 1, 2, 3 };
        int[] Property10 { get; set; } = |Array.Empty<int>()|(50);
    }

    public class GenericClass<T> where T : new()
    {
        T[] field01 = |new T[]|(51) { };
        T[] field02 = |new T[]|(52) { default, default(T), new() };
        T[] field03 = ||new T[0]|(54) { }|(53);
        T[] field04 = |new T[3]|(55) { default, default(T), new() };
        T[] field05 = ||new T[0]|(56)|(57);
        T[] field06 = new T[3];
        T[] field07 = |new[]|(58) { default, default(T), new() };
        T[] field08 = |{ }|(59);
        T[] field09 = |{|(60) default, default(T), new() };
        T[] field10 = |Array.Empty<T>()|(61);

        void Method(T a, T b, T c)
        {
            T[] var01 = |new T[]|(62) { };
            T[] var02 = |new T[]|(63) { a, b, c };
            T[] var03 = ||new T[0]|(65) { }|(64);
            T[] var04 = |new T[3]|(66) { a, b, c };
            T[] var05 = ||new T[0]|(67)|(68);
            T[] var06 = new T[3];
            T[] var07 = |new[]|(69) { a, b, c };
            T[] var08 = |{ }|(70);
            T[] var09 = |{|(71) a, b, c };
            T[] var10 = |Array.Empty<T>()|(72);

            Consumer(|new T[]|(73) { });
            Consumer(|new T[]|(74) { a, b, c });
            Consumer(||new T[0]|(76) { }|(75));
            Consumer(|new T[3]|(77) { a, b, c });
            Consumer(||new T[0]|(78)|(79));
            Consumer(new T[3]);
            Consumer(|new[]|(80) { a, b, c });
            Consumer(|Array.Empty<T>()|(81));
        }

        void Consumer(T[] items) { }

        T[] Property01 { get; } = |new T[]|(82) { };
        T[] Property02 { get; } = |new T[]|(83) { default, default(T), new() };
        T[] Property03 { get; set; } = ||new T[0]|(85) { }|(84);
        T[] Property04 { get; set; } = |new T[3]|(86) { default, default(T), new() };
        T[] Property05 => ||new T[0]|(87)|(88);
        T[] Property06 => new T[3];
        T[] Property07 => |new[]|(89) { default, default(T), new() };
        T[] Property08 { get; } = |{ }|(90);
        T[] Property09 { get; set; } = |{|(91) default, default(T), new() };
        T[] Property10 { get; set; } = |Array.Empty<T>()|(92);
    }

    internal class A { }
    internal class B(int x = 0) : A { }

    public class InferenceClass
    {
        A[] field1 = |new B[]|(93) { };
        A[] field2 = new B[] { new(1), new(2), new(3) };
        A[] field3 = ||new B[0]|(95) { }|(94);
        A[] field4 = |new B[3]|(96) { new B(1), new B(2), new B(3) };
        A[] field5 = ||new B[0]|(97)|(98);
        A[] field6 = new B[3];
        A[] field7 = |new[]|(99) { new B(1), new B(2), new B(3) };
        A[] field8 = |Array.Empty<B>()|(100);

        void Method(B a, B b, B c)
        {
            A[] var1 = |new B[]|(101) { };
            A[] var2 = |new B[]|(102) { a, b, c };
            A[] var3 = ||new B[0]|(104) { }|(103);
            A[] var4 = |new B[3]|(105) { a, b, c };
            A[] var5 = ||new B[0]|(106)|(107);
            A[] var6 = new B[3];
            A[] var7 = |new[]|(108) { a, b, c };
            A[] var8 = |Array.Empty<B>()|(109);

            Consumer(|new B[]|(110) { });
            Consumer(|new B[]|(111) { a, b, c });
            Consumer(||new B[0]|(113) { }|(112));
            Consumer(|new B[3]|(114) { a, b, c });
            Consumer(||new B[0]|(115)|(116));
            Consumer(new B[3]);
            Consumer(|new[]|(117) { a, b, c });
            Consumer(|Array.Empty<B>()|(118));
        }

        void Consumer(A[] items) { }

        A[] Property1 { get; } = |new B[]|(119) { };
        A[] Property2 { get; } = new B[] { new(1), new(2), new(3) };
        A[] Property3 { get; set; } = ||new B[0]|(121) { }|(120);
        A[] Property4 { get; set; } = |new B[3]|(122) { new B(1), new B(2), new B(3) };
        A[] Property5 => ||new B[0]|(123)|(124);
        A[] Property6 => new B[3];
        A[] Property7 => |new[]|(125) { new B(1), new B(2), new B(3) };
        A[] Property8 => |Array.Empty<B>()|(126);
    }
}
---------------------------------------------------------
(0): ReSharper Dead Code: Use collection expression
(1): ReSharper Dead Code: Use collection expression
(2): ReSharper Suggestion: Use 'Array<int>.Empty()'
(3): ReSharper Dead Code: Use collection expression
(4): ReSharper Dead Code: Use collection expression
(5): ReSharper Suggestion: Use 'Array<int>.Empty()'
(6): ReSharper Suggestion: Use collection expression.
(7): ReSharper Dead Code: Use collection expression
(8): ReSharper Suggestion: Use collection expression
(9): ReSharper Suggestion: Use collection expression
(10): ReSharper Suggestion: Use collection expression.
(11): ReSharper Dead Code: Use collection expression
(12): ReSharper Dead Code: Use collection expression
(13): ReSharper Suggestion: Use 'Array<int>.Empty()'
(14): ReSharper Dead Code: Use collection expression
(15): ReSharper Dead Code: Use collection expression
(16): ReSharper Suggestion: Use 'Array<int>.Empty()'
(17): ReSharper Suggestion: Use collection expression.
(18): ReSharper Dead Code: Use collection expression
(19): ReSharper Suggestion: Use collection expression
(20): ReSharper Suggestion: Use collection expression
(21): ReSharper Suggestion: Use collection expression.
(22): ReSharper Dead Code: Use collection expression
(23): ReSharper Dead Code: Use collection expression
(24): ReSharper Suggestion: Use 'Array<int>.Empty()'
(25): ReSharper Dead Code: Use collection expression
(26): ReSharper Dead Code: Use collection expression
(27): ReSharper Suggestion: Use 'Array<int>.Empty()'
(28): ReSharper Suggestion: Use collection expression.
(29): ReSharper Dead Code: Use collection expression
(30): ReSharper Suggestion: Use collection expression.
(31): ReSharper Suggestion: Use collection expression.
(32): ReSharper Dead Code: Use collection expression
(33): ReSharper Suggestion: Use 'Array<int>.Empty()'
(34): ReSharper Dead Code: Use collection expression
(35): ReSharper Dead Code: Use collection expression
(36): ReSharper Suggestion: Use 'Array<int>.Empty()'
(37): ReSharper Suggestion: Use collection expression.
(38): ReSharper Dead Code: Use collection expression
(39): ReSharper Suggestion: Use collection expression.
(40): ReSharper Dead Code: Use collection expression
(41): ReSharper Dead Code: Use collection expression
(42): ReSharper Suggestion: Use 'Array<int>.Empty()'
(43): ReSharper Dead Code: Use collection expression
(44): ReSharper Dead Code: Use collection expression
(45): ReSharper Suggestion: Use 'Array<int>.Empty()'
(46): ReSharper Suggestion: Use collection expression.
(47): ReSharper Dead Code: Use collection expression
(48): ReSharper Suggestion: Use collection expression
(49): ReSharper Suggestion: Use collection expression
(50): ReSharper Suggestion: Use collection expression.
(51): ReSharper Dead Code: Use collection expression
(52): ReSharper Dead Code: Use collection expression
(53): ReSharper Suggestion: Use 'Array<T>.Empty()'
(54): ReSharper Dead Code: Use collection expression
(55): ReSharper Dead Code: Use collection expression
(56): ReSharper Suggestion: Use 'Array<T>.Empty()'
(57): ReSharper Suggestion: Use collection expression.
(58): ReSharper Dead Code: Use collection expression
(59): ReSharper Suggestion: Use collection expression
(60): ReSharper Suggestion: Use collection expression
(61): ReSharper Suggestion: Use collection expression.
(62): ReSharper Dead Code: Use collection expression
(63): ReSharper Dead Code: Use collection expression
(64): ReSharper Suggestion: Use 'Array<T>.Empty()'
(65): ReSharper Dead Code: Use collection expression
(66): ReSharper Dead Code: Use collection expression
(67): ReSharper Suggestion: Use 'Array<T>.Empty()'
(68): ReSharper Suggestion: Use collection expression.
(69): ReSharper Dead Code: Use collection expression
(70): ReSharper Suggestion: Use collection expression
(71): ReSharper Suggestion: Use collection expression
(72): ReSharper Suggestion: Use collection expression.
(73): ReSharper Dead Code: Use collection expression
(74): ReSharper Dead Code: Use collection expression
(75): ReSharper Suggestion: Use 'Array<T>.Empty()'
(76): ReSharper Dead Code: Use collection expression
(77): ReSharper Dead Code: Use collection expression
(78): ReSharper Suggestion: Use 'Array<T>.Empty()'
(79): ReSharper Suggestion: Use collection expression.
(80): ReSharper Dead Code: Use collection expression
(81): ReSharper Suggestion: Use collection expression.
(82): ReSharper Dead Code: Use collection expression
(83): ReSharper Dead Code: Use collection expression
(84): ReSharper Suggestion: Use 'Array<T>.Empty()'
(85): ReSharper Dead Code: Use collection expression
(86): ReSharper Dead Code: Use collection expression
(87): ReSharper Suggestion: Use 'Array<T>.Empty()'
(88): ReSharper Suggestion: Use collection expression.
(89): ReSharper Dead Code: Use collection expression
(90): ReSharper Suggestion: Use collection expression
(91): ReSharper Suggestion: Use collection expression
(92): ReSharper Suggestion: Use collection expression.
(93): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(94):<overlapped> ReSharper Suggestion: Use 'Array<B>.Empty()'
(95): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(96): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(97):<overlapped> ReSharper Suggestion: Use 'Array<B>.Empty()'
(98): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(99): ReSharper Dead Code: Use collection expression
(100): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(101): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(102): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(103):<overlapped> ReSharper Suggestion: Use 'Array<B>.Empty()'
(104): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(105): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(106):<overlapped> ReSharper Suggestion: Use 'Array<B>.Empty()'
(107): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(108): ReSharper Dead Code: Use collection expression
(109): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(110): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(111): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(112):<overlapped> ReSharper Suggestion: Use 'Array<B>.Empty()'
(113): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(114): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(115):<overlapped> ReSharper Suggestion: Use 'Array<B>.Empty()'
(116): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(117): ReSharper Dead Code: Use collection expression
(118): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(119): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(120):<overlapped> ReSharper Suggestion: Use 'Array<B>.Empty()'
(121): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(122): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(123):<overlapped> ReSharper Suggestion: Use 'Array<B>.Empty()'
(124): ReSharper Suggestion: Use collection expression ('A[]' will be used).
(125): ReSharper Dead Code: Use collection expression
(126): ReSharper Suggestion: Use collection expression ('A[]' will be used).
