using System;
using System.Collections.Generic;

namespace TargetList
{
    public class NonGenericClass
    {
        IList<int> field1 = |new int[]|(0) { };
        IList<int> field2 = |new int[]|(1) { 1, 2, 3 };
        IList<int> field3 = ||new int[0]|(3) { }|(2);
        IList<int> field4 = |new int[3]|(4) { 1, 2, 3 };
        IList<int> field5 = ||new int[0]|(5)|(6);
        IList<int> field6 = new int[3];
        IList<int> field7 = |new[]|(7) { 1, 2, 3 };

        void Method(int a, int b, int c)
        {
            IList<int> var1 = |new int[]|(8) { };
            IList<int> var2 = |new int[]|(9) { a, b, c };
            IList<int> var3 = ||new int[0]|(11) { }|(10);
            IList<int> var4 = |new int[3]|(12) { a, b, c };
            IList<int> var5 = ||new int[0]|(13)|(14);
            IList<int> var6 = new int[3];
            IList<int> var7 = |new[]|(15) { a, b, c };

            Consumer(|new int[]|(16) { });
            Consumer(|new int[]|(17) { a, b, c });
            Consumer(||new int[0]|(19) { }|(18));
            Consumer(|new int[3]|(20) { a, b, c });
            Consumer(||new int[0]|(21)|(22));
            Consumer(new int[3]);
            Consumer(|new[]|(23) { a, b, c });

            ConsumerGeneric(|new int[]|(24) { });
            ConsumerGeneric(|new int[]|(25) { a, b, c });
            ConsumerGeneric<int>(||new int[0]|(27) { }|(26));
            ConsumerGeneric(|new int[3]|(28) { a, b, c });
            ConsumerGeneric(||new int[0]|(29)|(30));
            ConsumerGeneric(new int[3]);
            ConsumerGeneric(|new[]|(31) { a, b, c });
        }

        void Consumer(IList<int> items) { }
        void ConsumerGeneric<T>(IList<T> items) { }

        IList<string?> Property1 { get; } = |new string?[]|(32) { };
        IList<string?> Property2 { get; } = |new string?[]|(33) { "one", "two", "three" };
        IList<string?> Property3 { get; set; } = ||new string?[0]|(35) { }|(34);
        IList<string?> Property4 { get; set; } = |new string?[3]|(36) { "one", "two", "three" };
        IList<string?> Property5 => ||new string?[0]|(37)|(38);
        IList<string?> Property6 => new string?[3];
        IList<string?> Property7 => |new[]|(39) { "one", "two", "three", null };
    }

    public class GenericClass<T> where T : new()
    {
        IList<T> field1 = |new T[]|(40) { };
        IList<T> field2 = |new T[]|(41) { default, default(T), new() };
        IList<T> field3 = ||new T[0]|(43) { }|(42);
        IList<T> field4 = |new T[3]|(44) { default, default(T), new() };
        IList<T> field5 = ||new T[0]|(45)|(46);
        IList<T> field6 = new T[3];
        IList<T> field7 = |new[]|(47) { default, default(T), new() };

        void Method(T a, T b, T c)
        {
            IList<T> var1 = |new T[]|(48) { };
            IList<T> var2 = |new T[]|(49) { a, b, c };
            IList<T> var3 = ||new T[0]|(51) { }|(50);
            IList<T> var4 = |new T[3]|(52) { a, b, c };
            IList<T> var5 = ||new T[0]|(53)|(54);
            IList<T> var6 = new T[3];
            IList<T> var7 = |new[]|(55) { a, b, c };

            Consumer(|new T[]|(56) { });
            Consumer(|new T[]|(57) { a, b, c });
            Consumer(||new T[0]|(59) { }|(58));
            Consumer(|new T[3]|(60) { a, b, c });
            Consumer(||new T[0]|(61)|(62));
            Consumer(new T[3]);
            Consumer(|new[]|(63) { a, b, c });
        }

        void Consumer(IList<T> items) { }

        IList<T> Property1 { get; } = |new T[]|(64) { };
        IList<T> Property2 { get; } = |new T[]|(65) { default, default(T), new() };
        IList<T> Property3 { get; set; } = ||new T[0]|(67) { }|(66);
        IList<T> Property4 { get; set; } = |new T[3]|(68) { default, default(T), new() };
        IList<T> Property5 => ||new T[0]|(69)|(70);
        IList<T> Property6 => new T[3];
        IList<T> Property7 => |new[]|(71) { default, default(T), new() };
    }
}
---------------------------------------------------------
(0): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(1): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(2): ReSharper Suggestion: Use 'Array<int>.Empty()'
(3): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(4): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(5): ReSharper Suggestion: Use 'Array<int>.Empty()'
(6): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(7): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(8): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(9): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(10): ReSharper Suggestion: Use 'Array<int>.Empty()'
(11): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(12): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(13): ReSharper Suggestion: Use 'Array<int>.Empty()'
(14): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(15): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(16): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(17): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(18): ReSharper Suggestion: Use 'Array<int>.Empty()'
(19): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(20): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(21): ReSharper Suggestion: Use 'Array<int>.Empty()'
(22): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(23): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(24): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(25): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(26): ReSharper Suggestion: Use 'Array<int>.Empty()'
(27): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(28): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(29): ReSharper Suggestion: Use 'Array<int>.Empty()'
(30): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(31): ReSharper Suggestion: Use collection expression ('List<int>' will be used).
(32): ReSharper Suggestion: Use collection expression ('List<string?>' will be used).
(33): ReSharper Suggestion: Use collection expression ('List<string?>' will be used).
(34): ReSharper Suggestion: Use 'Array<string?>.Empty()'
(35): ReSharper Suggestion: Use collection expression ('List<string?>' will be used).
(36): ReSharper Suggestion: Use collection expression ('List<string?>' will be used).
(37): ReSharper Suggestion: Use 'Array<string?>.Empty()'
(38): ReSharper Suggestion: Use collection expression ('List<string?>' will be used).
(39): ReSharper Suggestion: Use collection expression ('List<string?>' will be used).
(40): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(41): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(42): ReSharper Suggestion: Use 'Array<T>.Empty()'
(43): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(44): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(45): ReSharper Suggestion: Use 'Array<T>.Empty()'
(46): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(47): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(48): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(49): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(50): ReSharper Suggestion: Use 'Array<T>.Empty()'
(51): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(52): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(53): ReSharper Suggestion: Use 'Array<T>.Empty()'
(54): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(55): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(56): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(57): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(58): ReSharper Suggestion: Use 'Array<T>.Empty()'
(59): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(60): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(61): ReSharper Suggestion: Use 'Array<T>.Empty()'
(62): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(63): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(64): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(65): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(66): ReSharper Suggestion: Use 'Array<T>.Empty()'
(67): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(68): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(69): ReSharper Suggestion: Use 'Array<T>.Empty()'
(70): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
(71): ReSharper Suggestion: Use collection expression ('List<T>' will be used).
