using System;
using System.IO;
using System.Threading.Tasks;
using JetBrains.Annotations;

namespace Test
{
    [method: MustDisposeResource]
    internal ref struct DisposableRefStruct()
    {
        public void Dispose() { }
    }

    internal class Parent
    {
        public virtual void NotAnnotated(ref IDisposable |p0|(0), out IAsyncDisposable |p1|(1)) => throw new NotImplementedException();

        public virtual void Annotated([MustDisposeResource] ref Stream p0, [MustDisposeResource] out DisposableRefStruct p1) => throw new NotImplementedException();

        public virtual void AnnotatedWithFalse([MustDisposeResource(false)] ref Stream p0, [MustDisposeResource(false)] out DisposableRefStruct p1) => throw new NotImplementedException();
    }

    internal class Child : Parent
    {
        public override void NotAnnotated(ref IDisposable |p0|(2), out IAsyncDisposable |p1|(3)) => throw new NotImplementedException();

        public override void Annotated(ref Stream p0, out DisposableRefStruct p1) => throw new NotImplementedException();

        public override void AnnotatedWithFalse(ref Stream |p0|(4), out DisposableRefStruct |p1|(5)) => throw new NotImplementedException();

        public void Other(ref IDisposable |p0|(6), out DisposableRefStruct |p1|(7)) => throw new NotImplementedException();
    }

    internal class Child2 : Parent
    {
        public override void NotAnnotated(ref IDisposable |p0|(8), out IAsyncDisposable |p1|(9)) => throw new NotImplementedException();

        public override void Annotated([|MustDisposeResource|(10)] ref Stream p0, [|MustDisposeResource|(11)] out DisposableRefStruct p1) => throw new NotImplementedException();

        public override void AnnotatedWithFalse([MustDisposeResource(false)] ref Stream p0, [MustDisposeResource(false)] out DisposableRefStruct p1) => throw new NotImplementedException();
    }

    internal class ParentTaskLike
    {
        public virtual void NotAnnotated(ref ValueTask<IDisposable> p0, out Task<IAsyncDisposable> p1) => throw new NotImplementedException();

        public virtual void Annotated([|MustDisposeResource|(12)] ref ValueTask<Stream> p0, [|MustDisposeResource|(13)] out Task<IDisposable> p1) => throw new NotImplementedException();

        public virtual void AnnotatedWithFalse([|MustDisposeResource(false)|(14)] ref ValueTask<Stream> p0, [|MustDisposeResource(false)|(15)] out Task<IAsyncDisposable> p1) => throw new NotImplementedException();
    }

    internal class ChildTaskLike : ParentTaskLike
    {
        public override void NotAnnotated(ref ValueTask<IDisposable> p0, out Task<IAsyncDisposable> p1) => throw new NotImplementedException();

        public override void Annotated(ref ValueTask<Stream> p0, out Task<IDisposable> p1) => throw new NotImplementedException();

        public override void AnnotatedWithFalse(ref ValueTask<Stream> p0, out Task<IAsyncDisposable> p1) => throw new NotImplementedException();

        public void Other(ref Task<IDisposable> p0, out ValueTask<Stream> p1) => throw new NotImplementedException();
    }

    internal class Other
    {
        public void InputParameters([|MustDisposeResource|(16)] IDisposable p0, [|MustDisposeResource|(17)] in IDisposable p1, [|MustDisposeResource|(18)] ref readonly IDisposable p2) { }

        public void NonDisposable([|MustDisposeResource|(19)] ref int p0, [|MustDisposeResource|(20)] out int p1) => throw new NotImplementedException();
    }
}
---------------------------------------------------------
(0): ReSharper Warning: Parameter is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(1): ReSharper Warning: Parameter is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(2): ReSharper Warning: Parameter is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(3): ReSharper Warning: Parameter is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(4): ReSharper Warning: Parameter is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(5): ReSharper Warning: Parameter is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(6): ReSharper Warning: Parameter is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(7): ReSharper Warning: Parameter is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(8): ReSharper Warning: Parameter is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(9): ReSharper Warning: Parameter is disposable, but not annotated with [MustDisposeResource] or [MustDisposeResource(false)].
(10): ReSharper Suggestion: Annotation is redundant because the parameter of a base method is already annotated with [MustDisposeResource].
(11): ReSharper Suggestion: Annotation is redundant because the parameter of a base method is already annotated with [MustDisposeResource].
(12): ReSharper Warning: Annotation is not valid because task-like disposable parameters are not yet supported.
(13): ReSharper Warning: Annotation is not valid because task-like disposable parameters are not yet supported.
(14): ReSharper Warning: Annotation is not valid because task-like disposable parameters are not yet supported.
(15): ReSharper Warning: Annotation is not valid because task-like disposable parameters are not yet supported.
(16): ReSharper Warning: Meaningless [MustDisposeResource] annotation for an input parameter
(17): ReSharper Warning: Meaningless [MustDisposeResource] annotation for an input parameter
(18): ReSharper Warning: Annotation is not valid for input parameters.
(19): ReSharper Warning: Annotation is not valid because the parameter is not disposable.
(20): ReSharper Warning: Annotation is not valid because the parameter is not disposable.
